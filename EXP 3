from collections import deque

def water_jug_bfs(jug1_capacity, jug2_capacity, target):
    visited = set()
    queue = deque()
    
    # Start with both jugs empty
    queue.append((0, 0))
    
    while queue:
        jug1, jug2 = queue.popleft()
        
        # If the state has been visited, skip
        if (jug1, jug2) in visited:
            continue
        visited.add((jug1, jug2))
        
        print(f"Jug1: {jug1} | Jug2: {jug2}")
        
        # If target is reached
        if jug1 == target or jug2 == target:
            print("\nTarget achieved!")
            return

        # All possible actions:
        possible_states = [
            (jug1_capacity, jug2),  # Fill jug1
            (jug1, jug2_capacity),  # Fill jug2
            (0, jug2),              # Empty jug1
            (jug1, 0),              # Empty jug2
            # Pour jug1 -> jug2
            (jug1 - min(jug1, jug2_capacity - jug2), jug2 + min(jug1, jug2_capacity - jug2)),
            # Pour jug2 -> jug1
            (jug1 + min(jug2, jug1_capacity - jug1), jug2 - min(jug2, jug1_capacity - jug1)),
        ]

        for state in possible_states:
            if state not in visited:
                queue.append(state)
    
    print("No solution found.")

# Example: jug1 = 4L, jug2 = 3L, target = 2L
water_jug_bfs(4, 3, 2)
