import heapq
goal = ((1,2,3),(4,5,6),(7,8,0))
def manhattan(state):
    dist = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                x, y = divmod(val - 1, 3)
                dist += abs(x - i) + abs(y - j)
    return dist
def find_zero(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j
def move(state, x1, y1, x2, y2):
    new = [list(row) for row in state]
    new[x1][y1], new[x2][y2] = new[x2][y2], new[x1][y1]
    return tuple(tuple(row) for row in new)
def print_state(state):
    for row in state:
        print(' '.join(str(n) if n != 0 else '_' for n in row))
    print()
def solve(start):
    queue = [(manhattan(start), 0, start, [])]
    seen = set()

    while queue:
        _, cost, state, path = heapq.heappop(queue)
        if state == goal:
            return path + [state]

        if state in seen:
            continue
        seen.add(state)

        x, y = find_zero(state)
        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                next_state = move(state, x, y, nx, ny)
                if next_state not in seen:
                    heapq.heappush(queue, (
                        cost + 1 + manhattan(next_state),
                        cost + 1,
                        next_state,
                        path + [state]
                    ))

start = ((1,2,3),(4,0,6),(7,5,8))
steps = solve(start)
print("Steps to solve:\n")
for i, state in enumerate(steps):
    print(f"Step {i}:")
    print_state(state)
